#version 430

in vec4 Position;
in vec3 Normal;
in vec2 TexCoord;

// The texture containing the result of the 1st pass
layout (binding=0) uniform sampler2D RenderTex;

uniform float EdgeThreshold; // The squared threshold

// Select functionality: pass1 or pass2
subroutine vec4 RenderPassType();
subroutine uniform RenderPassType RenderPass;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};
uniform LightInfo Light;

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};
uniform MaterialInfo Material;

const vec3 lum = vec3(0.2126, 0.7152, 0.0722);

out vec4 FragColor;

float luminance(vec3 color) {
    return dot(lum, color);
}

vec3 phongModel ( vec4 position, vec3 normal ) {
    vec3 s         = normalize(vec3(Light.Position - position));
    vec3 v         = normalize(-position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector
    vec3 h         = normalize (v+s);

    vec3  ambient  = Light.Intensity * Material.Ka;

    float sDotN    = max(dot(s, normal), 0.0);
    vec3  diffuse  = Light.Intensity * Material.Kd * sDotN;
    vec3  spec     = vec3(0.0);
    if (sDotN > 0.0) {
        spec = Light.Intensity * Material.Ks * pow(max(dot(h,normal), 0.0), Material.Shininess);
    }

    return ambient +  diffuse + spec;
}

subroutine (RenderPassType)
vec4 pass1() {
    return vec4(phongModel(Position, Normal), 1.0);
    //return vec4 (1.0, 0.0, 0.0, 1.0);
}

subroutine (RenderPassType)
vec4 pass2() {
    /*
    ivec2 pix = ivec2(gl_FragCoord.xy);
    float s00 = luminance(texelFetchOffset(RenderTex, pix, 0, ivec2(-1,  1)).rgb);
    float s10 = luminance(texelFetchOffset(RenderTex, pix, 0, ivec2(-1,  0)).rgb);
    float s20 = luminance(texelFetchOffset(RenderTex, pix, 0, ivec2(-1, -1)).rgb);
    float s01 = luminance(texelFetchOffset(RenderTex, pix, 0, ivec2( 0,  1)).rgb);
    float s21 = luminance(texelFetchOffset(RenderTex, pix, 0, ivec2( 0, -1)).rgb);
    float s02 = luminance(texelFetchOffset(RenderTex, pix, 0, ivec2( 1,  1)).rgb);
    float s12 = luminance(texelFetchOffset(RenderTex, pix, 0, ivec2( 1,  0)).rgb);
    float s22 = luminance(texelFetchOffset(RenderTex, pix, 0, ivec2( 1, -1)).rgb);

    float sx  = s00 + 2 * s10 + s20 - (s02 + 2 * s12 + s22);
    float sy  = s00 + 2 * s01 + s02 - (s20 + 2 * s21 + s22);

    float g = sx * sx + sy * sy;

    if (g > EdgeThreshold) return vec4(1.0);
    else return vec4(0.0, 0.0, 0.0, 1.0);
    */
    return texture(RenderTex, TexCoord);
}


void main()
{    
    FragColor = RenderPass();
    //FragColor = vec4 (1.0, 0.0, 0.0, 0.0);
}
